#!/usr/bin/env node

/**
 * Setup database connection
 */
var DB = require('../src/db');
if(DB.PRODUCTION) {
  //TODO setup production db
} else {
  let db = new DB();
  DB.dbExists()
  .then((res) => {
    if(res) {
      db.select('key', 'apikeys')
      .then((res) => {
        console.log(res);
      })
      .catch((err) => {
        console.error('Failed to select keys.  Possible misconfigured database. info: ' + err);
      });
    } else {
      console.error('Failed to read database, attempting to create new db');
      let db = new DB();
      db.makeTable('apikeys', [{name: 'key', type: 'text'},])
      .then((res) => {
        return db.insert('apikeys', '(\'tempkey\')');
      })
      .then((res) => {
        return db.select('key', 'apikeys');
      })
      .then((res) => {
        console.log(res);
      })
      .catch((err) => {
        console.error(err);
      });
    }
  })
  .catch((err) => {
    console.error(err);
  });
}

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tempchambercontrol:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
